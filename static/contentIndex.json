{"index":{"slug":"index","filePath":"index.md","title":"Welcome to Quartz","links":[],"tags":[],"content":"This is a blank Quartz installation.\nSee the documentation for how to get started."},"notes/tcand":{"slug":"notes/tcand","filePath":"notes/tcand.md","title":"The TCAND Problem in Query Optimization","links":[],"tags":["tcand","query-optimization","fd-closure"],"content":"The TCAND problem that I recently presented at ICDT and that we introduced with Hung Q. Ngo and Vasileios Nakos, aims to identify the smallest generating set of variables whose FD closure contains the target ùëá.  By solving the query only on this reduced set, we minimize intermediate sizes. This problem generalizes the well known minimum cardinality candidate key problem. However, here is a novel use to the best of my knowledge, pioneered by the engine of RelationalAI. Suppose we have a join-project query of the form:\nQ(T)‚ÄÖ‚Ää:‚Äâ‚Å£‚àí‚ÄÖ‚ÄäR_1(X_1),R_2(X_2),‚Ä¶,R_k(X_k)\nwhere:\n\nT = set of free variables (the projection variables we care about),\nR_i = database relations,\nSome relations may satisfy functional dependencies (FDs).\n\nLet‚Äôs see how we can use the TCAND problem to perform query optimization. Suppose the following two FDs hold, A \\to B, B \\to C.  Then, the closure  A^+ of A is \\{A,B,C\\}  or is DB terms, A is a primary key.\nLet‚Äôs now consider the triangle query Q(A,B,C) :- R_1(A, B), R_2(B, C), R_3(C, A).We can speed up the computation by computing P(A):- R_1(A,B), R_3(C,A) and then recover the B,C values using the FDs, and appropriate data structures.  In some cases where FDs are enforced globally (e.g., A is an employee id and no missing data are allowed), meaning that for each value of A appearing in the schema, there exists a unique B such that the tuple (A,B) exists in R_1 , then we can simply compute P(A) :- R_3(C,A) (or equivalently P(A):-R_1(A,B))  and then find the triangles. The key intuition here is that the FDs are telling us that the value of A is determining the triangle.\nIn simple words, the TCAND problem can be used for a  join-project query as follows:\n\nSolve the TCAND problem using the head variables of the query as the target set T. Let X be a small set whose closure includes T returned by the Nakos-Ngo-Tsourakakis algorithm(s).\nSolve the reduced query P(X).\nUse FDs to recover the full query result Q(T).\n"},"riddles":{"slug":"riddles","filePath":"riddles.md","title":"riddles","links":[],"tags":[],"content":"Star 180¬∞\nNotice that 43.7¬∞+19.7¬∞+18.2¬∞+43¬∞+55.4¬∞=180¬∞. Coincidence or not?\n\n  \n\n\n  Answer\n  \n    \n  \n  Draw the line AC. Notice that \\( \\angle DME = \\angle AMC \\).  \n  Therefore \\(x+y=\\delta+\\epsilon\\).  \n  The conclusion comes from the fact that the sum of the angles of triangle ABC is \\(180^\\circ\\).\n\nThe Lion and the Christian\nA lion and a Christian in a closed circular Roman arena have equal maximum speeds.  Can the lion catch the Christian in finite time?"}}